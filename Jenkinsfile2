pipeline {
    agent any

    tools {
        jdk 'JAVA_HOME'
        maven 'M2_HOME'
    }

    environment {
        // Add environment variables if needed for security
        TRIVY_CACHE_DIR = '/root/.cache/trivy'
    }

    stages {
        // Development Phase
        stage('Git Checkout') {
            steps {
                git branch: 'AchrefWerchfeni-5NIDS1-G1', 
                    url: 'https://github.com/MohamedKhalil-Mzali/5NIDS-G1-ProjetDevOps.git'
            }
        }

        stage('Static Code Analysis - SonarQube') {
            steps {
                withSonarQubeEnv('sq1') {
                    sh 'mvn sonar:sonar'
                }
            }
        }

        stage('Security Vulnerability Scan - Dependency Check') {
            steps {
                // Run OWASP Dependency Check to identify vulnerable dependencies
                sh 'mvn org.owasp:dependency-check-maven:check'
            }
        }

        stage('Security Unit Tests') {
            steps {
                // Run unit tests with security checks
                sh 'mvn test -Dsecurity'
            }
        }

        // Acceptance Phase
        stage('Compile Project') {
            steps {
                sh 'mvn clean compile'
            }
        }

        stage('Container Security Scan - Trivy') {
            steps {
                // Run Trivy to scan the Docker image for vulnerabilities
                sh 'trivy image --severity HIGH,CRITICAL zarix12/gestion-station-ski:1.0.0'
            }
        }

        stage('Build Docker Image') {
            steps {
                withCredentials([string(credentialsId: 'dockerhub', variable: 'dockerhub_token')]) {
                    sh "echo ${dockerhub_token} | docker login -u zarix12 --password-stdin"
                }
                sh 'docker build -t zarix12/gestion-station-ski:1.0.0 .'
            }
        }

        stage('Push Docker Image to Hub') {
            steps {
                withCredentials([string(credentialsId: 'dockerhub', variable: 'dockerhub_token')]) {
                    sh 'docker push zarix12/gestion-station-ski:1.0.0'
                }
            }
        }

        // Production Phase
        stage('Deploy to Nexus Repository') {
            steps {
                sh 'mvn deploy -DskipTests -DaltDeploymentRepository=deploymentRepo::default::http://192.168.33.10:8081/repository/maven-releases/'
            }
        }

        stage('Security Smoke Tests') {
            steps {
                // Run security smoke tests after deployment
                sh 'mvn verify -DskipTests=false -DsmokeTests'
            }
        }

        stage('Secrets Management Validation') {
            steps {
                // Validate secret management in configurations
                sh 'mvn verify -DsecretManagement'
            }
        }

        stage('Server Hardening Validation') {
            steps {
                // Validate server hardening configurations
                sh 'mvn verify -DserverHardening'
            }
        }

        // Operations Phase
        stage('Fault Injection') {
            steps {
                // Inject faults for resilience testing
                sh 'mvn test -DfaultInjection'
            }
        }

        stage('Continuous Scanning and Monitoring') {
            steps {
                // Run ongoing security and compliance scans
                sh 'mvn verify -DcontinuousScan'
            }
        }
    }

    post {
        success {
            script {
                emailext (
                    subject: "Build Success: ${currentBuild.fullDisplayName}",
                    body: "Le build a réussi ! Consultez les détails à ${env.BUILD_URL}",
                    recipientProviders: [[$class: 'CulpritsRecipientProvider'], [$class: 'DevelopersRecipientProvider']],
                    to: 'zarouxi@gmail.com, achref.werchfeni@esprit.tn'
                )
            }
        }
        failure {
            script {
                emailext (
                    subject: "Build Failure: ${currentBuild.fullDisplayName}",
                    body: "Le build a échoué ! Vérifiez les détails à ${env.BUILD_URL}",
                    recipientProviders: [[$class: 'CulpritsRecipientProvider'], [$class: 'DevelopersRecipientProvider']],
                    to: 'zarouxi@gmail.com, achref.werchfeni@esprit.tn'
                )
            }
        }
        always {
            script {
                emailext (
                    subject: "Build Notification: ${currentBuild.fullDisplayName}",
                    body: "Consultez les détails du build à ${env.BUILD_URL}",
                    recipientProviders: [[$class: 'CulpritsRecipientProvider'], [$class: 'DevelopersRecipientProvider']],
                    to: 'zarouxi@gmail.com, achref.werchfeni@esprit.tn'
                )
            }
        }
    }
}
